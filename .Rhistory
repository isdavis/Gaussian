sourceCpp("EBMA.cpp")
# In Class Activity: EM Algorithm
setwd("~/Documents/WUSTL/Spring18/Statistical_Programming/Rcpp")
sourceCpp("EBMA.cpp")
library(Rcpp)
## What do I mean by high level
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
library(microbenchmark)
setwd("~/Documents/WUSTL/Spring18/Statistical_Programming/Rcpp")
sourceCpp("Example1.cpp")
# In Class Activity: EM Algorithm
setwd("~/Documents/WUSTL/Spring18/Statistical_Programming/Rcpp")
sourceCpp("EBMA.cpp")
sourceCpp("EBMA.cpp")
weightedNormals(w = 0.5, c(2,1), c(1,0), c(.75, .25), sd=1)
sourceCpp("EBMA.cpp")
weightedNormals(w = 0.5, c(2,1), c(1,0), c(.75, .25), sd=1)
library(devtools)
install_github('goldingn/gpe')
?gpe
?gp
library(gpe)
?gp
getwd()
setwd("/Users/noahbardash/Documents/GitHub/Gaussian")
vote_data = read.delim("votechoice2000-04-08.dat")
mean(vote_data$rvote, na.rm = TRUE)
output = lm(rvote ~ eth, data = vote_data)
output # y=.62695-.09266x
# Create an rbf kernel which acts on some variable named temperature
k1 <- rbf('temperature')
# look at the parameters
summary(k1)
# plot covariance
plot(k1)
# look at some GPs drawn from this kernel
demoKernel(k1)
# make a fake 'true' function
f <- function(x) 2 * sin(x)
# make a fake dataset
x <- sort(runif(100, -2, 2))
y <- rpois(100, exp(f(x)))
df <- data.frame(y, x)
# fit a Poisson GP model with an rbf kernel
m <- gp(y ~ rbf('x'), data = df, family = poisson)
# predict from it
pred_df <- data.frame(x = seq(min(df$x), max(df$x), len = 500))
lambda <- predict(m, pred_df, type = 'response')
# plot the predicted rate parameter, the true model and the data
plot(lambda ~ pred_df$x, type = 'l', lwd = 2, ylim = range(y))
lines(exp(f(pred_df$x)) ~ pred_df$x, lty = 2)
points(y ~ x, data = df)
gp(formula = )
setwd("/Users/noahbardash/Documents/GitHub/Gaussian")
vote_data = read.delim("votingdata.dat")
vote_data
df = data.frame(vote_data)
df
head(df)
View(vote_data)
View(df)
View(vote_data)
summary(vote_data$stt)
state.f<-factor(vote_data$stt)
dummies<-model.matrix(~state.f)
View(dummies)
vote_data<-cbind(vote_data, dummies)
summary(vote_data$state.f30)
votedata30<-subset(vote_data, vote_data$state.f30==1)
View(votedata30)
votedata30<-subset(vote_data, vote_data$state.f30==1)
votedata30[complete.cases(votedata30), ]
View(votedata30)
votedata30[complete.cases(votedata30[,3]), ]
View(votedata30)
votedata30[!complete.cases(votedata30),]
newdata <- na.omit(votedata30)
View(newdata)
votedata30
votedata30[!complete.cases(votedata30),]
newdata <- na.omit(votedata30$eth)
newdata <- na.omit(votedata30$eth)
View(newdata)
votedata30[!complete.cases(votedata30),]
na.omit(votedata30$eth)
View(votedata30)
View(votedata30)
kernels(3, 5, 2)
kernels = function(x, prime, sigma){ #kernels function to inputted in GP
out = exp(-((abs(x-prime))^2)/(2(sigma)^2))
return(out)
}
kernels(3, 5, 2)
?gp
kernels = function(x, prime, sigma){ #kernels function to inputted in GP
out = exp(-((abs(x-prime))^2)/(2(sigma)^2))
return(out)
}
kernels(3, 5, 2)
kernels(3,5,2)
sumspecial = function(x,y){
return(x+y+2)
}
sumspecial(1,6)
kernels(3,5,2)
kernels(1:10,1:10,2)
class(kernels)
exp(-((abs(2-3))^2)/(2(5)^2))
exp(-((abs(4-3))^2)/(2(5)^2))
exp(-((abs(4-3))^2)/(2*(5)^2))
kernels = function(x, prime, sigma){ #kernels function to inputted in GP
out = exp(-((abs(x-prime))^2)/(2*(sigma)^2))
return(out)
}
kernels(2,6,9)
kernels(1:10,1:10,3)
kernels(1:10,2:11,3)
kernels(1:10,rep(2,10),3)
